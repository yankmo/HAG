#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÊµãËØïgemma3:4bÊ®°ÂûãÁöÑJSONËæìÂá∫Ê†ºÂºè
"""

import json
import re
import requests

def test_ollama_response():
    """ÊµãËØïOllamaÂìçÂ∫î"""
    url = "http://localhost:11434/api/generate"
    
    system_prompt = """‰Ω†ÊòØ‰∏Ä‰∏™‰∏ì‰∏öÁöÑÂåªÂ≠¶Áü•ËØÜÂõæË∞±ÊûÑÂª∫‰∏ìÂÆ∂„ÄÇ‰Ω†ÁöÑ‰ªªÂä°ÊòØ‰ªéÂåªÂ≠¶ÊñáÊú¨‰∏≠ÊèêÂèñÂÆû‰ΩìÂíåÂÖ≥Á≥ªÔºåÊûÑÂª∫Áü•ËØÜÂõæË∞±„ÄÇ

ËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãJSONÊ†ºÂºèËæìÂá∫ÁªìÊûúÔºö
{
    "entities": [
        {
            "name": "ÂÆû‰ΩìÂêçÁß∞",
            "type": "ÂÆû‰ΩìÁ±ªÂûã",
            "properties": {"description": "ÂÆû‰ΩìÊèèËø∞"}
        }
    ],
    "relations": [
        {
            "source": "Ê∫êÂÆû‰ΩìÂêçÁß∞",
            "target": "ÁõÆÊ†áÂÆû‰ΩìÂêçÁß∞", 
            "relation_type": "ÂÖ≥Á≥ªÁ±ªÂûã",
            "properties": {"description": "ÂÖ≥Á≥ªÊèèËø∞"}
        }
    ]
}

ÂÆû‰ΩìÁ±ªÂûãÂåÖÊã¨ÔºöDisease(ÁñæÁóÖ), Symptom(ÁóáÁä∂), Treatment(Ê≤ªÁñó), Drug(ËçØÁâ©), Gene(Âü∫Âõ†), Protein(ËõãÁôΩË¥®), BodyPart(Ë∫´‰ΩìÈÉ®‰Ωç), Cause(ÁóÖÂõ†), Risk(È£éÈô©Âõ†Á¥†)

ÂÖ≥Á≥ªÁ±ªÂûãÂåÖÊã¨ÔºöCAUSES(ÂØºËá¥), TREATS(Ê≤ªÁñó), HAS_SYMPTOM(ÊúâÁóáÁä∂), AFFECTS(ÂΩ±Âìç), RELATED_TO(Áõ∏ÂÖ≥), LOCATED_IN(‰Ωç‰∫é), INCREASES_RISK(Â¢ûÂä†È£éÈô©), DECREASES_RISK(Èôç‰ΩéÈ£éÈô©)

ËØ∑Á°Æ‰øùËæìÂá∫ÁöÑÊòØÊúâÊïàÁöÑJSONÊ†ºÂºè„ÄÇ"""

    user_prompt = """ËØ∑ÂàÜÊûê‰ª•‰∏ãÂåªÂ≠¶ÊñáÊú¨ÔºåÊèêÂèñÂÖ∂‰∏≠ÁöÑÂÆû‰ΩìÂíåÂÖ≥Á≥ªÔºö

Parkinson's disease (PD) is a chronic neurodegenerative disease that affects the central nervous system, mainly affecting the motor nervous system. Symptoms usually appear slowly over time, with the most obvious early symptoms being tremors, limb stiffness, decreased motor function, and gait abnormality.

ËØ∑ÊèêÂèñÊñáÊú¨‰∏≠ÁöÑÂÖ≥ÈîÆÂåªÂ≠¶ÂÆû‰ΩìÂíåÂÆÉ‰ª¨‰πãÈó¥ÁöÑÂÖ≥Á≥ªÔºåÊûÑÂª∫Áü•ËØÜÂõæË∞±„ÄÇ"""

    data = {
        "model": "gemma3:4b",
        "prompt": user_prompt,
        "system": system_prompt,
        "stream": False,
        "options": {
            "temperature": 0.1,
            "top_p": 0.9,
            "num_predict": 2048
        }
    }
    
    try:
        print("üîÑ ÂèëÈÄÅËØ∑Ê±ÇÂà∞Ollama...")
        response = requests.post(url, json=data, timeout=120)
        response.raise_for_status()
        result = response.json()
        raw_response = result.get("response", "")
        
        print("üìù ÂéüÂßãÂìçÂ∫î:")
        print("=" * 50)
        print(raw_response)
        print("=" * 50)
        
        # ÊµãËØïJSONËß£Êûê
        print("\nüîç ÊµãËØïJSONËß£Êûê...")
        parsed_data = parse_response(raw_response)
        
        if parsed_data:
            print(f"‚úÖ Ëß£ÊûêÊàêÂäü!")
            print(f"ÂÆû‰ΩìÊï∞Èáè: {len(parsed_data.get('entities', []))}")
            print(f"ÂÖ≥Á≥ªÊï∞Èáè: {len(parsed_data.get('relations', []))}")
            
            print("\nüìã ÂÆû‰ΩìÂàóË°®:")
            for entity in parsed_data.get('entities', []):
                print(f"  - {entity.get('name')} ({entity.get('type')})")
                
            print("\nüîó ÂÖ≥Á≥ªÂàóË°®:")
            for relation in parsed_data.get('relations', []):
                print(f"  - {relation.get('source')} -{relation.get('relation_type')}-> {relation.get('target')}")
        else:
            print("‚ùå Ëß£ÊûêÂ§±Ë¥•")
            
    except Exception as e:
        print(f"‚ùå ËØ∑Ê±ÇÂ§±Ë¥•: {e}")

def parse_response(response: str):
    """Ëß£ÊûêÂìçÂ∫î"""
    try:
        cleaned_response = response.strip()
        
        # ÊñπÊ≥ï1: Áõ¥Êé•Ëß£Êûê
        if cleaned_response.startswith('{') and cleaned_response.endswith('}'):
            try:
                return json.loads(cleaned_response)
            except json.JSONDecodeError:
                pass
        
        # ÊñπÊ≥ï2: Êü•Êâæ```json‰ª£Á†ÅÂùó
        json_pattern = r'```json\s*(\{.*?\})\s*```'
        matches = re.findall(json_pattern, cleaned_response, re.DOTALL | re.IGNORECASE)
        for match in matches:
            try:
                json_str = match.strip()
                data = json.loads(json_str)
                if "entities" in data or "relations" in data:
                    return data
            except json.JSONDecodeError:
                continue
        
        # ÊñπÊ≥ï3: ÊâãÂä®ÊèêÂèñ
        start_idx = cleaned_response.find('```json')
        if start_idx != -1:
            content_start = start_idx + 7  # len('```json')
            end_idx = cleaned_response.find('```', content_start)
            if end_idx != -1:
                json_str = cleaned_response[content_start:end_idx].strip()
                try:
                    return json.loads(json_str)
                except json.JSONDecodeError:
                    pass
        
        # ÊñπÊ≥ï4: Êü•Êâæ‰ªª‰ΩïJSONÂØπË±°
        start_idx = cleaned_response.find('{')
        if start_idx != -1:
            # ÊâæÂà∞ÊúÄÂêé‰∏Ä‰∏™}
            end_idx = cleaned_response.rfind('}')
            if end_idx != -1 and end_idx > start_idx:
                json_str = cleaned_response[start_idx:end_idx+1]
                try:
                    return json.loads(json_str)
                except json.JSONDecodeError:
                    pass
        
        return None
        
    except Exception as e:
        print(f"Ëß£ÊûêÂºÇÂ∏∏: {e}")
        return None

if __name__ == "__main__":
    test_ollama_response()